state -> Holds Data and state

mutations -> (Synchronous) Commit (this.$store.commit('mutationName', payload))

actions -> (Asynchronous) Dispatch (this.$store.dispatch('actionName', payload))

getters -> Returns data reactively

modules -> Namespaced Stores



<template>
  <div>
    <v-container>
      <v-row>
        <v-col cols="12">
          <div
            style="
              min-height: 100vh;
              display: flex;
              align-items: center;
              justify-content: center;
            "
          >
            <v-card>
              <v-card-title> Vuex Demo </v-card-title>
              <v-card-text>
                <h1 v-html="accountBalance"></h1>
                <h1 v-html="dollarAccountBalance" class="mt-2"></h1>
                <v-text-field
                  v-model="amount"
                  type="number"
                  label="Amount"
                ></v-text-field>
                <v-alert text type="info">
                  Current Exchange Rate is: {{ exchangeRate }}
                </v-alert>
              </v-card-text>
              <v-card-actions>
                <v-btn
                  outlined
                  @click="withdrawAmount"
                  class="primary secondary--text"
                >
                  Widthraw</v-btn
                >
                <v-spacer></v-spacer>
                <v-btn @click="depositAmount" class="error--text"
                  >Deposit</v-btn
                >
              </v-card-actions>
            </v-card>
          </div>
        </v-col>
      </v-row>
    </v-container>
  </div>
</template>

<script>
// @ is an alias to /src
// import HelloWorld from "@/components/HelloWorld.vue";
import { mapGetters, mapState } from "vuex";

export default {
  name: "Home",
  components: {
    // HelloWorld,
  },
  data() {
    return {
      // accountBalance: 0,
      amount: 0,
    };
  },
  computed: {
    ...mapState(["exchangeRate"]),
    ...mapGetters(["accountBalance", "dollarAccountBalance"]),
    // accountBalance: {
    //   get() {
    //     return this.$store.getters.accountBalance;
    //   },
    //   // set(value) {
    //   //   this.$store.commit("setAccountBalance", value);
    //   // },
    // },
    // dollarAccountBalance: {
    //   get() {
    //     return this.$store.getters.dollarAccountBalance;
    //   },
    // },
  },
  methods: {
    depositAmount() {
      // this.accountBalance += +this.amount;
      this.$store.commit("DEPOSIT_AMOUNT", { amount: this.amount });
    },
    withdrawAmount() {
      // this.accountBalance -= this.amount;
      this.$store.commit("WIDTHRAW_AMOUNT", { amount: this.amount });
    },
  },
  mounted() {
    console.log(this.$store.getters);
  },
};
</script>
